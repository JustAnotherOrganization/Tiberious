// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	v1.proto

It has these top-level messages:
	Meta
	ClientMessage
	ServerMessage
	StreamMessage
	NewConversationRequest
	Conversation
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Meta provides the meta data for Tiberious messages.
type Meta struct {
	Created *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{0} }

func (m *Meta) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

// ClientMessage is a message sent from a client to a server, this may
// contain information for the server or another client.
type ClientMessage struct {
	Meta           *Meta  `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	ConversationId int64  `protobuf:"varint,10,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Data           []byte `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ClientMessage) Reset()                    { *m = ClientMessage{} }
func (m *ClientMessage) String() string            { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()               {}
func (*ClientMessage) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{1} }

func (m *ClientMessage) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ClientMessage) GetConversationId() int64 {
	if m != nil {
		return m.ConversationId
	}
	return 0
}

func (m *ClientMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ServerMessage is a message sent from a server to a client, this will
// contain information from the server for the client.
type ServerMessage struct {
	Meta *Meta  `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ServerMessage) Reset()                    { *m = ServerMessage{} }
func (m *ServerMessage) String() string            { return proto.CompactTextString(m) }
func (*ServerMessage) ProtoMessage()               {}
func (*ServerMessage) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{2} }

func (m *ServerMessage) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ServerMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// StreamMessage wraps all the valid types that may be passed over a
// Tiberious gRPC stream.
type StreamMessage struct {
	// Types that are valid to be assigned to StreamMessage:
	//	*StreamMessage_ServerMessage
	//	*StreamMessage_ClientMessage
	StreamMessage isStreamMessage_StreamMessage `protobuf_oneof:"stream_message"`
}

func (m *StreamMessage) Reset()                    { *m = StreamMessage{} }
func (m *StreamMessage) String() string            { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()               {}
func (*StreamMessage) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{3} }

type isStreamMessage_StreamMessage interface {
	isStreamMessage_StreamMessage()
}

type StreamMessage_ServerMessage struct {
	ServerMessage *ServerMessage `protobuf:"bytes,10,opt,name=server_message,json=serverMessage,oneof"`
}
type StreamMessage_ClientMessage struct {
	ClientMessage *ClientMessage `protobuf:"bytes,11,opt,name=client_message,json=clientMessage,oneof"`
}

func (*StreamMessage_ServerMessage) isStreamMessage_StreamMessage() {}
func (*StreamMessage_ClientMessage) isStreamMessage_StreamMessage() {}

func (m *StreamMessage) GetStreamMessage() isStreamMessage_StreamMessage {
	if m != nil {
		return m.StreamMessage
	}
	return nil
}

func (m *StreamMessage) GetServerMessage() *ServerMessage {
	if x, ok := m.GetStreamMessage().(*StreamMessage_ServerMessage); ok {
		return x.ServerMessage
	}
	return nil
}

func (m *StreamMessage) GetClientMessage() *ClientMessage {
	if x, ok := m.GetStreamMessage().(*StreamMessage_ClientMessage); ok {
		return x.ClientMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMessage_OneofMarshaler, _StreamMessage_OneofUnmarshaler, _StreamMessage_OneofSizer, []interface{}{
		(*StreamMessage_ServerMessage)(nil),
		(*StreamMessage_ClientMessage)(nil),
	}
}

func _StreamMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMessage)
	// stream_message
	switch x := m.StreamMessage.(type) {
	case *StreamMessage_ServerMessage:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServerMessage); err != nil {
			return err
		}
	case *StreamMessage_ClientMessage:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClientMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMessage.StreamMessage has unexpected type %T", x)
	}
	return nil
}

func _StreamMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMessage)
	switch tag {
	case 10: // stream_message.server_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerMessage)
		err := b.DecodeMessage(msg)
		m.StreamMessage = &StreamMessage_ServerMessage{msg}
		return true, err
	case 11: // stream_message.client_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientMessage)
		err := b.DecodeMessage(msg)
		m.StreamMessage = &StreamMessage_ClientMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMessage)
	// stream_message
	switch x := m.StreamMessage.(type) {
	case *StreamMessage_ServerMessage:
		s := proto.Size(x.ServerMessage)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_ClientMessage:
		s := proto.Size(x.ClientMessage)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// NewConversationRequest is a requet to start a new Conversation.
type NewConversationRequest struct {
	Meta *Meta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// participants should be obfuscated, either using a temporary ID
	// or similar...
	Participants []string `protobuf:"bytes,10,rep,name=participants" json:"participants,omitempty"`
}

func (m *NewConversationRequest) Reset()                    { *m = NewConversationRequest{} }
func (m *NewConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*NewConversationRequest) ProtoMessage()               {}
func (*NewConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{4} }

func (m *NewConversationRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NewConversationRequest) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

// Conversation represents a Tiberious conversation.
type Conversation struct {
	Id         int64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Created    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	TimeOfLast *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=time_of_last,json=timeOfLast" json:"time_of_last,omitempty"`
}

func (m *Conversation) Reset()                    { *m = Conversation{} }
func (m *Conversation) String() string            { return proto.CompactTextString(m) }
func (*Conversation) ProtoMessage()               {}
func (*Conversation) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{5} }

func (m *Conversation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Conversation) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Conversation) GetTimeOfLast() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeOfLast
	}
	return nil
}

func init() {
	proto.RegisterType((*Meta)(nil), "tiberious.v1.Meta")
	proto.RegisterType((*ClientMessage)(nil), "tiberious.v1.ClientMessage")
	proto.RegisterType((*ServerMessage)(nil), "tiberious.v1.ServerMessage")
	proto.RegisterType((*StreamMessage)(nil), "tiberious.v1.StreamMessage")
	proto.RegisterType((*NewConversationRequest)(nil), "tiberious.v1.NewConversationRequest")
	proto.RegisterType((*Conversation)(nil), "tiberious.v1.Conversation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tiberious service

type TiberiousClient interface {
	// StartStream starts a bi-directional stream.
	StartStream(ctx context.Context, opts ...grpc.CallOption) (Tiberious_StartStreamClient, error)
	// NewConversation starts a new conversation.
	NewConversation(ctx context.Context, in *NewConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
}

type tiberiousClient struct {
	cc *grpc.ClientConn
}

func NewTiberiousClient(cc *grpc.ClientConn) TiberiousClient {
	return &tiberiousClient{cc}
}

func (c *tiberiousClient) StartStream(ctx context.Context, opts ...grpc.CallOption) (Tiberious_StartStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Tiberious_serviceDesc.Streams[0], c.cc, "/tiberious.v1.Tiberious/StartStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tiberiousStartStreamClient{stream}
	return x, nil
}

type Tiberious_StartStreamClient interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type tiberiousStartStreamClient struct {
	grpc.ClientStream
}

func (x *tiberiousStartStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tiberiousStartStreamClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tiberiousClient) NewConversation(ctx context.Context, in *NewConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := grpc.Invoke(ctx, "/tiberious.v1.Tiberious/NewConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tiberious service

type TiberiousServer interface {
	// StartStream starts a bi-directional stream.
	StartStream(Tiberious_StartStreamServer) error
	// NewConversation starts a new conversation.
	NewConversation(context.Context, *NewConversationRequest) (*Conversation, error)
}

func RegisterTiberiousServer(s *grpc.Server, srv TiberiousServer) {
	s.RegisterService(&_Tiberious_serviceDesc, srv)
}

func _Tiberious_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TiberiousServer).StartStream(&tiberiousStartStreamServer{stream})
}

type Tiberious_StartStreamServer interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type tiberiousStartStreamServer struct {
	grpc.ServerStream
}

func (x *tiberiousStartStreamServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tiberiousStartStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tiberious_NewConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TiberiousServer).NewConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiberious.v1.Tiberious/NewConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TiberiousServer).NewConversation(ctx, req.(*NewConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tiberious_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tiberious.v1.Tiberious",
	HandlerType: (*TiberiousServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewConversation",
			Handler:    _Tiberious_NewConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStream",
			Handler:       _Tiberious_StartStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1.proto",
}

func init() { proto.RegisterFile("v1.proto", fileDescriptorV1) }

var fileDescriptorV1 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x9b, 0xb6, 0x02, 0x3a, 0x49, 0xb3, 0xc8, 0x07, 0x14, 0x85, 0x4b, 0x15, 0x21, 0xc8,
	0x85, 0x94, 0x16, 0x6e, 0xec, 0x69, 0x77, 0x0f, 0x20, 0x28, 0x48, 0xe9, 0x72, 0xe1, 0x52, 0xb9,
	0xc9, 0x34, 0x58, 0x6a, 0xe2, 0x60, 0x4f, 0x83, 0x78, 0x0d, 0xde, 0x83, 0x03, 0x6f, 0x88, 0xe2,
	0x6c, 0xd8, 0xa4, 0x5a, 0x41, 0xb9, 0xd9, 0xe3, 0x7f, 0xbe, 0xf1, 0xfc, 0x33, 0xf0, 0xa0, 0x5a,
	0x44, 0xa5, 0x92, 0x24, 0x99, 0x43, 0x62, 0x8b, 0x4a, 0xc8, 0x83, 0x8e, 0xaa, 0x85, 0xff, 0x3a,
	0x13, 0xf4, 0xe5, 0xb0, 0x8d, 0x12, 0x99, 0xcf, 0x33, 0xb9, 0xe7, 0x45, 0x36, 0x37, 0xb2, 0xed,
	0x61, 0x37, 0x2f, 0xe9, 0x7b, 0x89, 0x7a, 0x4e, 0x22, 0x47, 0x4d, 0x3c, 0x2f, 0x6f, 0x4f, 0x0d,
	0xca, 0x7f, 0xde, 0x4b, 0xce, 0xe4, 0x6d, 0x6a, 0x7d, 0x33, 0x17, 0x73, 0x6a, 0xe4, 0xc1, 0x39,
	0x8c, 0x57, 0x48, 0x9c, 0xbd, 0x82, 0xfb, 0x89, 0x42, 0x4e, 0x98, 0x7a, 0xd6, 0xcc, 0x0a, 0xed,
	0xa5, 0x1f, 0x65, 0x52, 0x66, 0x7b, 0x8c, 0xda, 0xfc, 0xe8, 0xba, 0xad, 0x14, 0xb7, 0xd2, 0x80,
	0x60, 0x7a, 0xb9, 0x17, 0x58, 0xd0, 0x0a, 0xb5, 0xe6, 0x19, 0xb2, 0xa7, 0x30, 0xce, 0x91, 0xf8,
	0x0d, 0x83, 0x45, 0xdd, 0xbe, 0xa2, 0xba, 0x50, 0x6c, 0xde, 0xd9, 0x33, 0x38, 0x4b, 0x64, 0x51,
	0xa1, 0xd2, 0x9c, 0x84, 0x2c, 0x36, 0x22, 0xf5, 0x60, 0x66, 0x85, 0xa3, 0xd8, 0xed, 0x86, 0xdf,
	0xa6, 0x8c, 0xc1, 0x38, 0xe5, 0xc4, 0x3d, 0x7b, 0x66, 0x85, 0x4e, 0x6c, 0xce, 0xc1, 0x3b, 0x98,
	0xae, 0x51, 0x55, 0xa8, 0xfe, 0xb7, 0x6a, 0x0b, 0xab, 0x4b, 0x4d, 0x6e, 0x60, 0x3f, 0x2d, 0x98,
	0xae, 0x49, 0x21, 0xcf, 0x5b, 0xda, 0x15, 0xb8, 0xda, 0xe0, 0x37, 0x79, 0x13, 0x31, 0x7a, 0x7b,
	0xf9, 0xb8, 0xcf, 0xed, 0x7d, 0xe1, 0xcd, 0x20, 0x9e, 0xea, 0xde, 0x9f, 0xae, 0xc0, 0x4d, 0x8c,
	0x35, 0x7f, 0x28, 0xf6, 0x5d, 0x94, 0x9e, 0x7d, 0x35, 0x25, 0xe9, 0x06, 0x2e, 0x1e, 0x82, 0xab,
	0xcd, 0xe7, 0x5a, 0x4a, 0x90, 0xc2, 0xa3, 0x0f, 0xf8, 0xed, 0xb2, 0xe3, 0x52, 0x8c, 0x5f, 0x0f,
	0xa8, 0xe9, 0x64, 0x17, 0x02, 0x70, 0x4a, 0xae, 0x48, 0x24, 0xa2, 0xe4, 0x05, 0x69, 0x0f, 0x66,
	0xa3, 0x70, 0x12, 0xf7, 0x62, 0xc1, 0x0f, 0x0b, 0x9c, 0x6e, 0x0d, 0xe6, 0xc2, 0x50, 0x34, 0xab,
	0x31, 0x8a, 0x87, 0x22, 0xed, 0xee, 0xcb, 0xf0, 0xe4, 0x7d, 0x61, 0xe7, 0xe0, 0xd4, 0xfb, 0xba,
	0x91, 0xbb, 0xcd, 0x9e, 0x6b, 0xf2, 0x46, 0xff, 0x4c, 0x85, 0x5a, 0xff, 0x71, 0xf7, 0x9e, 0x6b,
	0x5a, 0xfe, 0xb2, 0x60, 0x72, 0xdd, 0x36, 0xc5, 0x56, 0x60, 0xaf, 0x89, 0x2b, 0x6a, 0x86, 0xc7,
	0x8e, 0xa7, 0xd3, 0x1d, 0xa9, 0xff, 0xb7, 0xc7, 0x60, 0x10, 0x5a, 0x2f, 0x2c, 0xf6, 0x09, 0xce,
	0x8e, 0x7c, 0x65, 0x4f, 0xfa, 0x59, 0x77, 0xdb, 0xee, 0xfb, 0x47, 0x03, 0xed, 0x48, 0x82, 0xc1,
	0xc5, 0xf8, 0xf3, 0xb0, 0x5a, 0x6c, 0xef, 0x99, 0xce, 0x5e, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x82, 0x7f, 0x26, 0x2d, 0xf2, 0x03, 0x00, 0x00,
}
